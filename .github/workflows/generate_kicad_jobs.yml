name: Generate KiCad Documentation
on:
  push:
    branches: [ doc_workflow ]
  workflow_dispatch:

jobs:
  generate-kicad-outputs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper branch management

      - name: Find KiCad project files
        id: find-files
        run: |
          # Find all KiCad project files in the repository
          PROJECT_FILE=$(find . -name "*.kicad_pro" | head -n 1)
          
          if [ -z "$PROJECT_FILE" ]; then
            echo "No KiCad project files found"
            echo "project_found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract project directory and name
          PROJECT_DIR=$(dirname "$PROJECT_FILE")
          PROJECT_NAME=$(basename "$PROJECT_FILE" .kicad_pro)
          
          echo "PROJECT_FILE: $PROJECT_FILE"
          echo "PROJECT_DIR: $PROJECT_DIR"
          echo "PROJECT_NAME: $PROJECT_NAME"
          
          # Find matching schematic and PCB files
          SCHEMATIC_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_sch" | head -n 1)
          PCB_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_pcb" | head -n 1)
          
          # Output the results
          echo "project_file=$PROJECT_FILE" >> $GITHUB_OUTPUT
          echo "project_found=true" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          
          if [ -z "$SCHEMATIC_FILE" ]; then
            echo "schematic_found=false" >> $GITHUB_OUTPUT
          else
            echo "schematic_file=$SCHEMATIC_FILE" >> $GITHUB_OUTPUT
            echo "schematic_found=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "$PCB_FILE" ]; then
            echo "pcb_found=false" >> $GITHUB_OUTPUT
          else
            echo "pcb_file=$PCB_FILE" >> $GITHUB_OUTPUT
            echo "pcb_found=true" >> $GITHUB_OUTPUT
          fi

      - name: Skip if project files not found
        if: steps.find-files.outputs.project_found != 'true'
        run: |
          echo "No KiCad project found. Skipping workflow."
          exit 0

      - name: Determine default branch
        id: default-branch
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Default branch is: $DEFAULT_BRANCH"

      # Checkout default branch first before any operations
      - name: Checkout default branch
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          DEFAULT_BRANCH="${{ steps.default-branch.outputs.default_branch }}"
          
          # Checkout the default branch
          git fetch origin $DEFAULT_BRANCH
          git checkout $DEFAULT_BRANCH || git checkout -b $DEFAULT_BRANCH

      - name: Create and set permissions on project-specific output directories
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          # Clean any existing output directories to prevent conflicts
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          rm -rf "${PROJECT_NAME}/docs/schematics" "${PROJECT_NAME}/docs/bom" "${PROJECT_NAME}/docs/pictures" "${PROJECT_NAME}/docs/3d_models"
          
          # Create project-specific directories
          mkdir -p "$PROJECT_NAME/docs/schematics" "$PROJECT_NAME/docs/bom" "$PROJECT_NAME/docs/pictures" "$PROJECT_NAME/docs/3d_models"
          chmod -R 777 "$PROJECT_NAME/docs"
          echo "Created project-specific directories at $PROJECT_NAME/docs"

      # Extract configuration values - adapted for nested structure
      - name: Extract KiCad configuration
        id: kicad-config
        if: steps.find-files.outputs.pcb_found == 'true'
        run: |
          # Helper function to extract nested YAML values
          # Usage: extract_value "views.side.prefix" "default_value"
          extract_value() {
            local path=$1
            local default=$2
            
            if [ -f ".github/kicad-config.yml" ]; then
              # Use awk to parse nested YAML (3-level nesting)
              local value=$(awk -v path="$path" '
                BEGIN { 
                  split(path, parts, ".")
                  level1 = parts[1]
                  level2 = parts[2]
                  level3 = parts[3]
                  in_section = 0
                  in_view = 0
                }
                /^[a-z_]+:/ { 
                  in_section = 0
                  in_view = 0
                  if ($1 == level1":") in_section = 1
                }
                in_section && /^  [a-z_]+:/ {
                  in_view = 0
                  gsub(/^  /, "")
                  if ($1 == level2":") in_view = 1
                }
                in_view && /^    [a-z_]+:/ {
                  # Extract the parameter name and value
                  gsub(/^    /, "")
                  param_name = $1
                  gsub(/:/, "", param_name)
                  
                  if (param_name == level3) {
                    # Extract value after the colon
                    value_part = $0
                    sub(/^[^:]+: */, "", value_part)
                    # Remove leading/trailing quotes
                    gsub(/^["\047]|["\047]$/, "", value_part)
                    print value_part
                    exit
                  }
                }
              ' .github/kicad-config.yml | tr -d '\n\r')
              
              if [ ! -z "$value" ]; then
                echo "$value"
                return
              fi
            fi
            echo "$default"
          }
          
          # Extract all view names from the config file
          if [ -f ".github/kicad-config.yml" ]; then
            VIEW_NAMES=$(awk '
              /^views:/ { in_views = 1; next }
              in_views && /^[a-z_]+:/ && /^[^ ]/ {
                gsub(/:$/, "", $1)
                if ($1 != "" && $1 != "views") {
                  print $1
                }
              }
            ' .github/kicad-config.yml | sort -u)
            
            # If no views found in config, use default views
            if [ -z "$VIEW_NAMES" ]; then
              VIEW_NAMES="side top bottom left right front back"
            fi
          else
            # Default views if config file doesn't exist
            VIEW_NAMES="side top bottom left right front back"
          fi
          
          # Output the list of views
          echo "available_views=$VIEW_NAMES" >> $GITHUB_OUTPUT
          
          # Set default values for all possible views
          for view in $VIEW_NAMES; do
            # Set default values based on view name
            case $view in
              "side") 
                DEFAULT_PREFIX="1_"
                DEFAULT_SUFFIX="_side"
                DEFAULT_ZOOM="1.0"
                DEFAULT_ROTATE="0,0,0"
                DEFAULT_PAN="0,0,0"
                DEFAULT_LIGHT="30"
                ;;
              "top") 
                DEFAULT_PREFIX="2_"
                DEFAULT_SUFFIX="_top"
                DEFAULT_ZOOM="1.0"
                DEFAULT_ROTATE="0,0,0"
                DEFAULT_PAN="0,0,0"
                DEFAULT_LIGHT="60"
                ;;
              "bottom") 
                DEFAULT_PREFIX="3_"
                DEFAULT_SUFFIX="_bottom"
                DEFAULT_ZOOM="1.0"
                DEFAULT_ROTATE="0,0,0"
                DEFAULT_PAN="0,0,0"
                DEFAULT_LIGHT="60"
                ;;
              "left") 
                DEFAULT_PREFIX="4_"
                DEFAULT_SUFFIX="_left"
                DEFAULT_ZOOM="1.0"
                DEFAULT_ROTATE="0,90,0"
                DEFAULT_PAN="0,0,0"
                DEFAULT_LIGHT="10"
                ;;
              "right") 
                DEFAULT_PREFIX="5_"
                DEFAULT_SUFFIX="_right"
                DEFAULT_ZOOM="1.0"
                DEFAULT_ROTATE="0,-90,0"
                DEFAULT_PAN="0,0,0"
                DEFAULT_LIGHT="10"
                ;;
              "front") 
                DEFAULT_PREFIX="6_"
                DEFAULT_SUFFIX="_front"
                DEFAULT_ZOOM="1.0"
                DEFAULT_ROTATE="0,0,0"
                DEFAULT_PAN="0,0,0"
                DEFAULT_LIGHT="10"
                ;;
              "back") 
                DEFAULT_PREFIX="7_"
                DEFAULT_SUFFIX="_back"
                DEFAULT_ZOOM="1.0"
                DEFAULT_ROTATE="0,0,0"
                DEFAULT_PAN="0,0,0"
                DEFAULT_LIGHT="10"
                ;;
              *)
                # Default values for custom views
                DEFAULT_PREFIX="1_"
                DEFAULT_SUFFIX="_$view"
                DEFAULT_ZOOM="1.0"
                DEFAULT_ROTATE="0,0,0"
                DEFAULT_PAN="0,0,0"
                DEFAULT_LIGHT="30"
                ;;
            esac
            
            # Extract custom values if they exist in config, otherwise use defaults
            PREFIX=$(extract_value "views.$view.prefix" "$DEFAULT_PREFIX")
            SUFFIX=$(extract_value "views.$view.suffix" "$DEFAULT_SUFFIX")
            ZOOM=$(extract_value "views.$view.zoom_factor" "$DEFAULT_ZOOM")
            ROTATE=$(extract_value "views.$view.rotate" "$DEFAULT_ROTATE")
            PAN=$(extract_value "views.$view.pan" "$DEFAULT_PAN")
            LIGHT=$(extract_value "views.$view.light_elevation" "$DEFAULT_LIGHT")
            # Extract custom side parameter (if specified)
            SIDE=$(extract_value "views.$view.side" "default")
            
            # Output these values with the view name in the key
            echo "${view}_view_prefix=$PREFIX" >> $GITHUB_OUTPUT
            echo "${view}_view_suffix=$SUFFIX" >> $GITHUB_OUTPUT
            echo "${view}_view_zoom_factor=$ZOOM" >> $GITHUB_OUTPUT
            echo "${view}_view_rotate=$ROTATE" >> $GITHUB_OUTPUT
            echo "${view}_view_pan=$PAN" >> $GITHUB_OUTPUT
            echo "${view}_view_light_elevation=$LIGHT" >> $GITHUB_OUTPUT
            echo "${view}_view_side=$SIDE" >> $GITHUB_OUTPUT
          done

      # Pull Docker image before using it
      - name: Pull KiCad Docker image
        if: steps.find-files.outputs.project_found == 'true'
        run: docker pull ionutms/kicad_9:V1.1

      # Modified to use Docker image's built-in capabilities
      - name: Generate KiCad outputs
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          # Run KiCad operations using the Docker image's built-in capabilities
          docker run --rm -u $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/kicad_project \
            -e HOME=/tmp/home \
            ionutms/kicad_9:V1.1 \
            bash -c "set -e && \
              # Clone 3D models to a temporary directory to avoid ownership issues
              mkdir -p /tmp/3D_Models_Vault && \
              git clone https://github.com/ionutms/3D_Models_Vault.git /tmp/3D_Models_Vault && \
              
              # Create necessary directories
              mkdir -p /tmp/home/.config/kicad/9.0/colors \
              /tmp/home/.local/share/kicad/9.0/3rdparty/colors && \
              
              # Set environment variables
              export HOME=/tmp/home && \
              
              # Configure KiCad to use 3D models from temporary location
              echo '{\"environment\":{\"vars\":{\"KICAD9_3D_MODELS_VAULT\":\"/tmp/3D_Models_Vault/\"}}}' > /tmp/home/.config/kicad/9.0/kicad_common.json && \
              
              # Setup Gruvbox theme if schematic found
              if [ '${{ steps.find-files.outputs.schematic_found }}' == 'true' ]; then
                git clone --depth 1 https://github.com/AlexanderBrevig/kicad-gruvbox-theme.git /tmp/kicad-gruvbox-theme && \
                cp /tmp/kicad-gruvbox-theme/colors/Gruvbox.json /tmp/home/.local/share/kicad/9.0/3rdparty/colors/ && \
                
                # Generate PDF schematic
                kicad-cli sch export pdf \
                  --output '/tmp/schematic.pdf' \
                  '/kicad_project/${{ steps.find-files.outputs.schematic_file }}' \
                  -t gruvbox && \
                cp /tmp/schematic.pdf \"/kicad_project/$PROJECT_NAME/docs/schematics/${PROJECT_NAME}_schematics.pdf\"
              fi && \

              # Generate PCB render side view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/${{ steps.kicad-config.outputs.side_view_prefix }}${PROJECT_NAME}${{ steps.kicad-config.outputs.side_view_suffix }}.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation ${{ steps.kicad-config.outputs.side_view_light_elevation }} \
                  --rotate ${{ steps.kicad-config.outputs.side_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.side_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.side_view_zoom_factor }}
              fi && \

              # Generate PCB render top view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/${{ steps.kicad-config.outputs.top_view_prefix }}${PROJECT_NAME}${{ steps.kicad-config.outputs.top_view_suffix }}.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation ${{ steps.kicad-config.outputs.top_view_light_elevation }} \
                  --rotate ${{ steps.kicad-config.outputs.top_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.top_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.top_view_zoom_factor }}
              fi && \

              # Generate PCB render bottom view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/${{ steps.kicad-config.outputs.bottom_view_prefix }}${PROJECT_NAME}${{ steps.kicad-config.outputs.bottom_view_suffix }}.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation ${{ steps.kicad-config.outputs.bottom_view_light_elevation }} \
                  --side bottom \
                  --rotate ${{ steps.kicad-config.outputs.bottom_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.bottom_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.bottom_view_zoom_factor }}
              fi && \

              # Generate PCB render left side view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/${{ steps.kicad-config.outputs.left_view_prefix }}${PROJECT_NAME}${{ steps.kicad-config.outputs.left_view_suffix }}.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation ${{ steps.kicad-config.outputs.left_view_light_elevation }} \
                  --side left \
                  --rotate ${{ steps.kicad-config.outputs.left_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.left_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.left_view_zoom_factor }}
              fi && \

              # Generate PCB render right side view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/${{ steps.kicad-config.outputs.right_view_prefix }}${PROJECT_NAME}${{ steps.kicad-config.outputs.right_view_suffix }}.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation ${{ steps.kicad-config.outputs.right_view_light_elevation }} \
                  --side right \
                  --rotate ${{ steps.kicad-config.outputs.right_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.right_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.right_view_zoom_factor }}
              fi && \

              # Generate PCB render front view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/${{ steps.kicad-config.outputs.front_view_prefix }}${PROJECT_NAME}${{ steps.kicad-config.outputs.front_view_suffix }}.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation ${{ steps.kicad-config.outputs.front_view_light_elevation }} \
                  --side front \
                  --rotate ${{ steps.kicad-config.outputs.front_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.front_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.front_view_zoom_factor }}
              fi && \

              # Generate PCB render back view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/${{ steps.kicad-config.outputs.back_view_prefix }}${PROJECT_NAME}${{ steps.kicad-config.outputs.back_view_suffix }}.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation ${{ steps.kicad-config.outputs.back_view_light_elevation }} \
                  --side back \
                  --rotate ${{ steps.kicad-config.outputs.back_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.back_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.back_view_zoom_factor }}
              fi && \

              # Generate Interactive HTML BOM if PCB found - using Docker image's wrapper
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                # Change to a writable directory to avoid permission issues
                cd /tmp && \
                
                # Use the Docker image's built-in wrapper script for InteractiveHtmlBom
                generate_ibom \
                  --show-fields=Reference,Value,Footprint \
                  --group-fields=Value,Footprint \
                  --name-format=\"${PROJECT_NAME}_ibom\" \
                  --no-browser \
                  --dest-dir=/tmp \
                  '/kicad_project/${{ steps.find-files.outputs.pcb_file }}' && \
                  
                # Move the generated file to the documentation directory
                if [ -f \"/tmp/${PROJECT_NAME}_ibom.html\" ]; then
                  mv \"/tmp/${PROJECT_NAME}_ibom.html\" \"/kicad_project/$PROJECT_NAME/docs/bom/\"
                else
                  echo 'Generated BOM file not found in expected location'
                  find /tmp -name '*ibom*.html' 2>/dev/null || true
                fi
              fi"

      - name: Check for generated files
        id: check-files
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          PDF_COUNT=$(find "${PROJECT_NAME}/docs/schematics" -type f -name "*.pdf" | wc -l || echo "0")
          PNG_COUNT=$(find "${PROJECT_NAME}/docs/pictures" -type f -name "*.png" | wc -l || echo "0")
          HTML_COUNT=$(find "${PROJECT_NAME}/docs/bom" -type f -name "*.html" | wc -l || echo "0")
          TOTAL_COUNT=$((PDF_COUNT + PNG_COUNT + HTML_COUNT))

          echo "Found $PDF_COUNT PDF files, $PNG_COUNT PNG files, and $HTML_COUNT HTML files in ${PROJECT_NAME}/docs"
          
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "files_generated=true" >> $GITHUB_OUTPUT
            echo "Files generated successfully"
          else
            echo "files_generated=false" >> $GITHUB_OUTPUT
            echo "No files were generated, checking for errors..."
          fi

      - name: Upload outputs as artifacts
        if: steps.find-files.outputs.project_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: kicad-outputs-${{ steps.find-files.outputs.project_name }}
          path: |
            ${{ steps.find-files.outputs.project_name }}/docs/schematics/
            ${{ steps.find-files.outputs.project_name }}/docs/bom/
            ${{ steps.find-files.outputs.project_name }}/docs/pictures/
          retention-days: 1
          if-no-files-found: warn

      - name: Configure Git
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          # Add the files
          git add "${PROJECT_NAME}/docs/schematics" "${PROJECT_NAME}/docs/bom" "${PROJECT_NAME}/docs/pictures"
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "Committing changes"
            git commit -m "Update KiCad documentation for ${PROJECT_NAME} (schematics and PCB renders)"
            
            # Push with error handling
            echo "Pushing to current branch"
            git push origin HEAD || git push -u origin HEAD
          fi

      - name: Trigger 3D Models Generation Workflow
        if: steps.check-files.outputs.files_generated == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          event-type: generate-3d-models
          client-payload: |
            {
              "source_repo": "${{ github.repository }}",
              "project_name": "${{ steps.find-files.outputs.project_name }}",
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}"
            }

      - name: Run Symbol Check
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          # Get repository information
          SOURCE_REPO="${{ github.repository }}"
          SOURCE_REF="${{ github.sha }}"
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          PICTURES_PATH="$PROJECT_NAME/docs/pictures"
          
          echo "Running symbol check for repository: $SOURCE_REPO"
          echo "Source ref: $SOURCE_REF"
          echo "Pictures path: $PICTURES_PATH"
          
          # Try to trigger the symbol check with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Make API call to KiCAD Symbols Generator
            HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.REPO_DISPATCH_TOKEN }}" \
              https://api.github.com/repos/ionutms/KiCAD_Symbols_Generator/dispatches \
              -d "{
                \"event_type\": \"check_pictures\",
                \"client_payload\": {
                  \"source_repo\": \"$SOURCE_REPO\",
                  \"source_ref\": \"$SOURCE_REF\",
                  \"pictures_path\": \"$PICTURES_PATH\"
                }
              }")
            
            # Extract the HTTP status code
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            if [ "$HTTP_STATUS" -eq 204 ] || [ "$HTTP_STATUS" -eq 200 ]; then
              echo "✅ Symbol check triggered successfully"
              echo "Response: $RESPONSE_BODY"
              break
            else
              echo "⚠️ Attempt $((RETRY_COUNT + 1)) failed with HTTP status: $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              
              # Increment retry count
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              # Wait before retrying (exponential backoff)
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((RETRY_COUNT * 30))  # Wait 30, 60, 90 seconds for retries
                echo "Waiting $WAIT_TIME seconds before retry..."
                sleep $WAIT_TIME
              fi
            fi
          done
          
          # If all retries failed, report error
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "❌ Failed to trigger symbol check after $MAX_RETRIES attempts"
            echo "This may be due to GitHub API rate limits or other issues."
            exit 1
          fi