name: Generate KiCad Documentation
on:
  push:
    branches: [ doc_workflow ]
  workflow_dispatch:

jobs:
  generate-kicad-outputs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find KiCad project files
        id: find-files
        run: |
          PROJECT_FILE=$(find . -name "*.kicad_pro" | head -n 1)
          
          if [ -z "$PROJECT_FILE" ]; then
            echo "No KiCad project files found"
            echo "project_found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          PROJECT_DIR=$(dirname "$PROJECT_FILE")
          PROJECT_NAME=$(basename "$PROJECT_FILE" .kicad_pro)
          
          echo "PROJECT_FILE: $PROJECT_FILE"
          echo "PROJECT_DIR: $PROJECT_DIR"
          echo "PROJECT_NAME: $PROJECT_NAME"
          
          SCHEMATIC_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_sch" | head -n 1)
          PCB_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_pcb" | head -n 1)
          
          echo "project_file=$PROJECT_FILE" >> $GITHUB_OUTPUT
          echo "project_found=true" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          
          if [ -z "$SCHEMATIC_FILE" ]; then
            echo "schematic_found=false" >> $GITHUB_OUTPUT
          else
            echo "schematic_file=$SCHEMATIC_FILE" >> $GITHUB_OUTPUT
            echo "schematic_found=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "$PCB_FILE" ]; then
            echo "pcb_found=false" >> $GITHUB_OUTPUT
          else
            echo "pcb_file=$PCB_FILE" >> $GITHUB_OUTPUT
            echo "pcb_found=true" >> $GITHUB_OUTPUT
          fi

      - name: Skip if project files not found
        if: steps.find-files.outputs.project_found != 'true'
        run: |
          echo "No KiCad project found. Skipping workflow."
          exit 0

      - name: Determine default branch
        id: default-branch
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Default branch is: $DEFAULT_BRANCH"

      - name: Checkout default branch
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          DEFAULT_BRANCH="${{ steps.default-branch.outputs.default_branch }}"
          git fetch origin $DEFAULT_BRANCH
          git checkout $DEFAULT_BRANCH || git checkout -b $DEFAULT_BRANCH

      - name: Create and set permissions on project-specific output directories
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          rm -rf "${PROJECT_NAME}/docs/schematics" "${PROJECT_NAME}/docs/bom" "${PROJECT_NAME}/docs/pictures" "${PROJECT_NAME}/docs/3d_models"
          mkdir -p "$PROJECT_NAME/docs/schematics" "$PROJECT_NAME/docs/bom" "$PROJECT_NAME/docs/pictures" "$PROJECT_NAME/docs/3d_models"
          chmod -R 777 "$PROJECT_NAME/docs"
          echo "Created project-specific directories at $PROJECT_NAME/docs"

      - name: Parse view configurations
        id: parse-views
        if: steps.find-files.outputs.pcb_found == 'true'
        run: |
          # Create a script to parse all views from config
          cat > /tmp/parse_views.sh << 'PARSE_SCRIPT'
          #!/bin/bash
          
          CONFIG_FILE=".github/kicad-config.yml"
          
          # Default views if config doesn't exist
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "No config file found, using defaults"
            cat << 'EOF'
          side|1_|_side|1.0|0,0,0|0,0,0|30|top
          top|2_|_top|1.0|0,0,0|0,0,0|60|top
          bottom|3_|_bottom|1.0|0,0,0|0,0,0|60|bottom
          left|4_|_left|1.0|0,90,0|0,0,0|10|left
          right|5_|_right|1.0|0,-90,0|0,0,0|10|right
          front|6_|_front|1.0|0,0,0|0,0,0|10|front
          back|7_|_back|1.0|0,0,0|0,0,0|10|back
          EOF
            exit 0
          fi
          
          # Parse YAML and extract all views
          awk '
          BEGIN { 
            in_views = 0
            current_view = ""
          }
          
          /^views:/ { 
            in_views = 1
            next
          }
          
          in_views && /^  [a-z_]+:/ {
            if (current_view != "") {
              # Print previous view
              printf "%s|%s|%s|%s|%s|%s|%s|%s\n", 
                view_name, prefix, suffix, zoom, rotate, pan, light, side
            }
            
            # Start new view
            gsub(/^  /, "")
            gsub(/:/, "")
            view_name = $1
            current_view = view_name
            
            # Set defaults
            prefix = "1_"
            suffix = "_" view_name
            zoom = "1.0"
            rotate = "0,0,0"
            pan = "0,0,0"
            light = "30"
            side = "top"
            
            # Determine default side based on view name
            if (view_name == "bottom") side = "bottom"
            else if (view_name == "left") side = "left"
            else if (view_name == "right") side = "right"
            else if (view_name == "front") side = "front"
            else if (view_name == "back") side = "back"
            
            next
          }
          
          in_views && current_view != "" && /^    [a-z_]+:/ {
            gsub(/^    /, "")
            param = $1
            gsub(/:/, "", param)
            
            value = $0
            sub(/^[^:]+: */, "", value)
            gsub(/^["\047]|["\047]$/, "", value)
            
            if (param == "prefix") prefix = value
            else if (param == "suffix") suffix = value
            else if (param == "zoom_factor") zoom = value
            else if (param == "rotate") rotate = value
            else if (param == "pan") pan = value
            else if (param == "light_elevation") light = value
            else if (param == "side") side = value
          }
          
          /^[a-z]+:/ && !/^views:/ {
            if (in_views && current_view != "") {
              # Print last view before leaving views section
              printf "%s|%s|%s|%s|%s|%s|%s|%s\n", 
                view_name, prefix, suffix, zoom, rotate, pan, light, side
              current_view = ""
            }
            in_views = 0
          }
          
          END {
            if (current_view != "") {
              # Print final view
              printf "%s|%s|%s|%s|%s|%s|%s|%s\n", 
                view_name, prefix, suffix, zoom, rotate, pan, light, side
            }
          }
          ' "$CONFIG_FILE"
          PARSE_SCRIPT
          
          chmod +x /tmp/parse_views.sh
          
          # Execute and save views configuration
          /tmp/parse_views.sh > /tmp/views_config.txt
          
          echo "Parsed views:"
          cat /tmp/views_config.txt
          
          # Create the views config as a multiline output
          {
            echo 'views_config<<EOF'
            cat /tmp/views_config.txt
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Pull KiCad Docker image
        if: steps.find-files.outputs.project_found == 'true'
        run: docker pull ionutms/kicad_9:V1.1

      - name: Generate KiCad outputs
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          # Save views configuration to a file accessible in Docker
          cat > /tmp/views_config.txt << 'EOF'
          ${{ steps.parse-views.outputs.views_config }}
          EOF
          
          docker run --rm -u $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/kicad_project \
            -v /tmp/views_config.txt:/tmp/views_config.txt:ro \
            -e HOME=/tmp/home \
            ionutms/kicad_9:V1.1 \
            bash -c "set -e && \
              mkdir -p /tmp/3D_Models_Vault && \
              git clone https://github.com/ionutms/3D_Models_Vault.git /tmp/3D_Models_Vault && \
              
              mkdir -p /tmp/home/.config/kicad/9.0/colors \
              /tmp/home/.local/share/kicad/9.0/3rdparty/colors && \
              
              export HOME=/tmp/home && \
              
              echo '{\"environment\":{\"vars\":{\"KICAD9_3D_MODELS_VAULT\":\"/tmp/3D_Models_Vault/\"}}}' > /tmp/home/.config/kicad/9.0/kicad_common.json && \
              
              # Generate PDF schematic
              if [ '${{ steps.find-files.outputs.schematic_found }}' == 'true' ]; then
                git clone --depth 1 https://github.com/AlexanderBrevig/kicad-gruvbox-theme.git /tmp/kicad-gruvbox-theme && \
                cp /tmp/kicad-gruvbox-theme/colors/Gruvbox.json /tmp/home/.local/share/kicad/9.0/3rdparty/colors/ && \
                
                kicad-cli sch export pdf \
                  --output '/tmp/schematic.pdf' \
                  '/kicad_project/${{ steps.find-files.outputs.schematic_file }}' \
                  -t gruvbox && \
                cp /tmp/schematic.pdf \"/kicad_project/$PROJECT_NAME/docs/schematics/${PROJECT_NAME}_schematics.pdf\"
              fi && \

              # Generate all PCB renders dynamically
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                while IFS='|' read -r view_name prefix suffix zoom rotate pan light side; do
                  echo \"Generating render for view: \$view_name\" && \
                  
                  # Build the kicad-cli command
                  CMD=\"kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }}\" && \
                  CMD=\"\$CMD -o \\\"/kicad_project/$PROJECT_NAME/docs/pictures/\${prefix}${PROJECT_NAME}\${suffix}.png\\\"\" && \
                  CMD=\"\$CMD --background transparent\" && \
                  CMD=\"\$CMD --quality high\" && \
                  CMD=\"\$CMD --light-side-elevation \$light\" && \
                  CMD=\"\$CMD --rotate \$rotate\" && \
                  CMD=\"\$CMD --pan \$pan\" && \
                  CMD=\"\$CMD --zoom \$zoom\" && \
                  
                  # Add side parameter if not 'top'
                  if [ \"\$side\" != \"top\" ]; then
                    CMD=\"\$CMD --side \$side\"
                  fi && \
                  
                  # Execute the command
                  eval \"\$CMD\" || echo \"Failed to generate \$view_name view\"
                done < /tmp/views_config.txt
              fi && \

              # Generate Interactive HTML BOM
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                cd /tmp && \
                generate_ibom \
                  --show-fields=Reference,Value,Footprint \
                  --group-fields=Value,Footprint \
                  --name-format=\"${PROJECT_NAME}_ibom\" \
                  --no-browser \
                  --dest-dir=/tmp \
                  '/kicad_project/${{ steps.find-files.outputs.pcb_file }}' && \
                  
                if [ -f \"/tmp/${PROJECT_NAME}_ibom.html\" ]; then
                  mv \"/tmp/${PROJECT_NAME}_ibom.html\" \"/kicad_project/$PROJECT_NAME/docs/bom/\"
                else
                  echo 'Generated BOM file not found in expected location'
                  find /tmp -name '*ibom*.html' 2>/dev/null || true
                fi
              fi"

      - name: Check for generated files
        id: check-files
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          PDF_COUNT=$(find "${PROJECT_NAME}/docs/schematics" -type f -name "*.pdf" | wc -l || echo "0")
          PNG_COUNT=$(find "${PROJECT_NAME}/docs/pictures" -type f -name "*.png" | wc -l || echo "0")
          HTML_COUNT=$(find "${PROJECT_NAME}/docs/bom" -type f -name "*.html" | wc -l || echo "0")
          TOTAL_COUNT=$((PDF_COUNT + PNG_COUNT + HTML_COUNT))

          echo "Found $PDF_COUNT PDF files, $PNG_COUNT PNG files, and $HTML_COUNT HTML files in ${PROJECT_NAME}/docs"
          
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "files_generated=true" >> $GITHUB_OUTPUT
            echo "Files generated successfully"
          else
            echo "files_generated=false" >> $GITHUB_OUTPUT
            echo "No files were generated, checking for errors..."
          fi

      - name: Upload outputs as artifacts
        if: steps.find-files.outputs.project_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: kicad-outputs-${{ steps.find-files.outputs.project_name }}
          path: |
            ${{ steps.find-files.outputs.project_name }}/docs/schematics/
            ${{ steps.find-files.outputs.project_name }}/docs/bom/
            ${{ steps.find-files.outputs.project_name }}/docs/pictures/
          retention-days: 1
          if-no-files-found: warn

      - name: Configure Git
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          git add "${PROJECT_NAME}/docs/schematics" "${PROJECT_NAME}/docs/bom" "${PROJECT_NAME}/docs/pictures"
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "Committing changes"
            git commit -m "Update KiCad documentation for ${PROJECT_NAME} (schematics and PCB renders)"
            git push origin HEAD || git push -u origin HEAD
          fi

      - name: Trigger 3D Models Generation Workflow
        if: steps.check-files.outputs.files_generated == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          event-type: generate-3d-models
          client-payload: |
            {
              "source_repo": "${{ github.repository }}",
              "project_name": "${{ steps.find-files.outputs.project_name }}",
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}"
            }

      - name: Run Symbol Check
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          SOURCE_REPO="${{ github.repository }}"
          SOURCE_REF="${{ github.sha }}"
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          PICTURES_PATH="$PROJECT_NAME/docs/pictures"
          
          echo "Running symbol check for repository: $SOURCE_REPO"
          echo "Source ref: $SOURCE_REF"
          echo "Pictures path: $PICTURES_PATH"
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.REPO_DISPATCH_TOKEN }}" \
              https://api.github.com/repos/ionutms/KiCAD_Symbols_Generator/dispatches \
              -d "{
                \"event_type\": \"check_pictures\",
                \"client_payload\": {
                  \"source_repo\": \"$SOURCE_REPO\",
                  \"source_ref\": \"$SOURCE_REF\",
                  \"pictures_path\": \"$PICTURES_PATH\"
                }
              }")
            
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            if [ "$HTTP_STATUS" -eq 204 ] || [ "$HTTP_STATUS" -eq 200 ]; then
              echo "✅ Symbol check triggered successfully"
              echo "Response: $RESPONSE_BODY"
              break
            else
              echo "⚠️ Attempt $((RETRY_COUNT + 1)) failed with HTTP status: $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((RETRY_COUNT * 30))
                echo "Waiting $WAIT_TIME seconds before retry..."
                sleep $WAIT_TIME
              fi
            fi
          done
          
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "❌ Failed to trigger symbol check after $MAX_RETRIES attempts"
            echo "This may be due to GitHub API rate limits or other issues."
            exit 1
          fi